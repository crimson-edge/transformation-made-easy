---
interface Props {
  layout?: 'footer' | 'section';
}

const { layout = 'section' } = Astro.props;
---

<div class={layout === 'footer' ? 'w-full' : 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 bg-gradient-to-b from-indigo-50 to-white'}>
  <div class={`text-center ${layout === 'footer' ? 'max-w-md mx-auto' : 'max-w-2xl mx-auto'}`}>
    <h2 class={`font-bold ${layout === 'footer' ? 'text-xl text-gray-900' : 'text-3xl md:text-4xl bg-gradient-to-r from-indigo-600 to-cyan-500 bg-clip-text text-transparent mb-4'}`}>
      Get Weekly Transformation Tips
    </h2>
    <p class={`mt-2 ${layout === 'footer' ? 'text-sm text-gray-500' : 'text-xl text-gray-600'}`}>
      Join our community and receive exclusive tips, success stories, and the latest research in weight loss and body transformation.
    </p>
    
    <form class="mt-6 sm:flex justify-center gap-2" id={layout === 'footer' ? 'footer-newsletter-form' : 'main-newsletter-form'}>
      <div class="min-w-0 flex-1">
        <label for={`email-${layout}`} class="sr-only">Email address</label>
        <input
          type="email"
          id={`email-${layout}`}
          required
          class="block w-full rounded-md border border-gray-300 px-4 py-3 text-base text-gray-900 placeholder-gray-500 shadow-sm focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
          placeholder="Enter your email"
        />
      </div>
      <div class={layout === 'footer' ? 'mt-3 sm:mt-0' : 'mt-4 sm:mt-0'}>
        <button
          type="submit"
          class={`block w-full rounded-md border border-transparent px-4 py-3 text-base font-medium text-white shadow hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:px-10 disabled:opacity-50 disabled:cursor-not-allowed ${
            layout === 'footer'
              ? 'bg-indigo-600 hover:bg-indigo-700'
              : 'bg-gradient-to-r from-indigo-600 to-cyan-500'
          }`}
        >
          <span class="subscribe-text">Subscribe</span>
          <span class="loading-text hidden">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Subscribing...
          </span>
        </button>
      </div>
      
      <div class="success-message hidden mt-3 text-sm text-green-600">
        ðŸŽ‰ Thank you for subscribing! Check your email to confirm.
      </div>
      <div class="error-message hidden mt-3 text-sm text-red-600">
      </div>
    </form>
    
    <p class={`mt-3 ${layout === 'footer' ? 'text-xs text-gray-400' : 'text-sm text-gray-500'}`}>
      We respect your privacy. Unsubscribe at any time.
    </p>
  </div>
</div>

<script>
  function setupNewsletterForm(formId: string) {
    const form = document.getElementById(formId) as HTMLFormElement;
    if (!form) return;

    const emailInput = form.querySelector('input[type="email"]') as HTMLInputElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const subscribeText = submitButton.querySelector('.subscribe-text') as HTMLElement;
    const loadingText = submitButton.querySelector('.loading-text') as HTMLElement;
    const successMessage = form.querySelector('.success-message') as HTMLElement;
    const errorMessage = form.querySelector('.error-message') as HTMLElement;

    function setLoading(loading: boolean) {
      emailInput.disabled = loading;
      submitButton.disabled = loading;
      subscribeText.classList.toggle('hidden', loading);
      loadingText.classList.toggle('hidden', !loading);
    }

    function showMessage(type: 'success' | 'error', message: string) {
      successMessage.classList.toggle('hidden', type !== 'success');
      errorMessage.classList.toggle('hidden', type !== 'error');
      if (type === 'error') {
        errorMessage.textContent = message;
      }
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = emailInput.value;
      
      // Hide any previous messages
      showMessage('success', '');
      showMessage('error', '');
      
      // Show loading state
      setLoading(true);
      
      try {
        const response = await fetch('/api/newsletter-signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email }),
        });

        const data = await response.json();

        if (response.ok) {
          showMessage('success', '');
          emailInput.value = '';
        } else {
          throw new Error(data.error || 'Failed to subscribe');
        }
      } catch (error) {
        showMessage('error', error instanceof Error ? error.message : 'There was an error subscribing to the newsletter. Please try again later.');
      } finally {
        setLoading(false);
      }
    });
  }

  // Setup both forms
  setupNewsletterForm('main-newsletter-form');
  setupNewsletterForm('footer-newsletter-form');
</script>
